import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
# use seaborn plotting style defaults
import seaborn as sns; sns.set()

from google.colab import files
uploaded = files.upload()

#read cvs file into dataframe
df = pd.read_csv('buddymove_holidayiq.csv', index_col=0)
print(df.head())
print('----------------------------------------')
print(df.describe())
#normalize data
df = (df - df.mean())/df.std()
print('----------------------------------------')
# Displaying DataFrame columns.
df.columns
# Some basic information about each column in the DataFrame 
df.info()

#normalize data
df = (df - df.mean())/df.std()
observations = list(df.index)
variables = list(df.columns)
#visualisation of the data using a box plot
sns.boxplot(data=df, orient="v", palette="Set2")

#Use swarmplot() to show the datapoints on top of the boxes:
plt. figure()  
#sns.set(rc={'figure.figsize':(5.7,3.27)})
#ax = sns.boxplot(data=df, orient="v", palette="Set2")
#ax = sns.swarmplot(data=df, color=".25")    
#pairplot
#sns.pairplot(df,aspect =1.5,size =2)
sns.pairplot(df)	

#Covariance
dfc = df - df.mean() #centered data
plt. figure()
plt.title('Covariance matrix \n\n')
ax = sns.heatmap(dfc.cov(), cmap='RdYlGn_r', linewidths=0.5, annot=True, 
            cbar=False, square=True)
plt.yticks(rotation=0)
ax.tick_params(labelbottom=False,labeltop=True)

#Principal component analysis
pca = PCA()
pca.fit(df)
Z = pca.fit_transform(df)
colors = np.random.rand(249)
plt. figure()
plt.scatter(Z[:,0], Z[:,1], c=colors)
plt.xlabel('$Z_1$')
plt.ylabel('$Z_2$')
for label, x, y in zip(observations,Z[:, 0],Z[:, 1]):
    plt.annotate('', xy=(x, y), xytext=(-2, 2),
        textcoords='offset points', ha='right', va='bottom')
    
#Eigenvectors
A = pca.components_.T 
plt. figure()
plt.scatter(A[:,0],A[:,1],c='r',marker='^')
plt.xlabel('$A_1$')
plt.ylabel('$A_2$');
for label, x, y in zip(variables, A[:, 0], A[:, 1]):
    plt.annotate(label, xy=(x, y), xytext=(-2, 2),
        textcoords='offset points', ha='right', va='bottom')
    
plt.figure()
plt.scatter(A[:, 0],A[:, 1],marker='o',c=A[:,0],s=A*1000,
    cmap=plt.get_cmap('Spectral'))
for label, x, y in zip(variables,A[:, 0],A[:, 1]):
    plt.annotate(label,xy=(x, y), xytext=(-20, 20),
        textcoords='offset points', ha='right', va='bottom',
        bbox=dict(boxstyle='round,pad=0.5', fc='cyan', alpha=0.5),
        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))  
#plt.grid(b=None)


#Eigenvalues
Lambda = pca.explained_variance_ 
    
#Scree plot
plt. figure()
x = np.arange(len(pca.explained_variance_)) + 1
plt.plot(x,Lambda, 'ro-', lw=2)
plt.xticks(x, [""+str(i) for i in x], rotation=0)
plt.xlabel('Number of components')
plt.ylabel('Explained variance')

#Explained variance
ell = pca.explained_variance_ratio_
plt. figure()
ind = np.arange(len(ell))
plt.bar(ind, ell, align='center', alpha=0.8)
plt.plot(np.cumsum(ell))
plt.xlabel('Number of components')
plt.ylabel('Cumulative explained variance')

#Biplot
# 0,1 denote PC1 and PC2; change values for other PCs
A1 = A[:,0] 
A2 = A[:,1]
Z1 = Z[:,0] 
Z2 = Z[:,1]

plt. figure()
for i in range(len(A1)):
# arrows project features as vectors onto PC axes
    plt.arrow(0, 0, A1[i]*max(Z1), A2[i]*max(Z2),
              color='r', width=0.0005, head_width=0.0025)
    plt.text(A1[i]*max(Z1)*1.2, A2[i]*max(Z2)*1.2,variables[i], color='r')

for i in range(len(Z1)):
# circles project documents (ie rows from csv) as points onto PC axes
    plt.scatter(Z1[i], Z2[i], c='g', marker='o')
    #plt.text(Z1[i]*1.2, Z2[i]*1.2, observations[i], color='b')

plt.figure()
comps = pd.DataFrame(A,columns = variables)
sns.heatmap(comps,cmap='RdYlGn_r', linewidths=0.5, annot=True, 
            cbar=True, square=True)
ax.tick_params(labelbottom=False,labeltop=True)
plt.title('Principal components')		

--------------------------------------------------------------

Kernel PCA Code

#import libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D
import random

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv('mydataset2.csv')

x = dataset.iloc[:, [5,6]].values
y = dataset.iloc[:,7].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# Applying Kernel PCA
from sklearn.decomposition import KernelPCA
kpca = KernelPCA(n_components = 2, kernel = 'rbf')
x_train = kpca.fit_transform(x_train)
x_test = kpca.transform(x_test)

# Fitting Logistic Regression to the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(x_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

# Visualising the Training set results
from matplotlib.colors import ListedColormap
x_set, y_set = x_train, y_train
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
plt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.50, cmap = ListedColormap(('magenta', 'blue')))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                c = ListedColormap(('magenta', 'blue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Shopping')
plt.ylabel('Picnic')
plt.legend()
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
x_set, y_set = x_test, y_test
x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
plt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.50, cmap = ListedColormap(('magenta', 'blue')))
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                c = ListedColormap(('magenta', 'blue'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('Shopping')
plt.ylabel('Picnic')
plt.legend()
plt.show()

#Confusion matrix
import seaborn as sns
import matplotlib.pyplot as plt     

ax= plt.subplot()
sns.set(font_scale=1.0)
sns.heatmap(cm, annot=True, ax = ax,annot_kws={"size": 20}); #annot=True to annotate cells

# labels, title and ticks
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')
ax.xaxis.set_ticklabels(['0', '1']); ax.yaxis.set_ticklabels(['0', '1']);